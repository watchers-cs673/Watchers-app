// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "mongodb"
  // provider = "mysql"
  url      = env("DATABASE_URL")
  // schemas  = ["user-data", "movie-data"]
}

model User {
  userId            String        @id @default(auto()) @map("_id") @db.ObjectId
  username          String        @unique
  email             String        @unique
  passwordHash      String
  uniqueUserAuthKey String
  displayName       String?
  posts             Post[]
  likes             Like[]
  comments          UserComment[]
  follower          Follows[]     @relation("following")
  following         Follows[]     @relation("follower")
  // activeTokens      UserTokenData[]
  // @@schema("user-data")
}

model Post {
  postId            String @id @default(auto()) @map("_id") @db.ObjectId
  author            User   @relation(fields: [authorId], references: [userId])
  authorId          String @db.ObjectId // relation scalar field  (used in the `@relation` attribute above)
  postBody          String
  referencedMovieId String
  postLikes         Like[]
  // @@schema("user-data")
}

model Like {
  likeID         String       @id @default(auto()) @map("_id") @db.ObjectId
  liking         User         @relation(fields: [likingUserId], references: [userId])
  likedPostId    String       @db.ObjectId
  liked          Post         @relation(fields: [likedPostId], references: [postId])
  likingUserId   String       @db.ObjectId
  commentLike    UserComment? @relation(fields: [likedCommentId], references: [commentId])
  likedCommentId String?      @map("commentCommentId") @db.ObjectId
  // @@schema("user-data")
}

model UserComment {
  commentId    String @id @default(auto()) @map("_id") @db.ObjectId
  commenter    User   @relation(fields: [commenterId], references: [userId])
  commenterId  String @db.ObjectId // relation scalar field  (used in the `@relation` attribute above)
  commentBody  String
  commentLikes Like[]
  // @@schema("user-data")
}

model Follows {
  follower         User   @relation("follower", fields: [followerId], references: [userId])
  followerId       String @db.ObjectId
  following        User   @relation("following", fields: [followingId], references: [userId])
  followingId      String @db.ObjectId
  // @@id([followerId, followingId])
  followRelationId String @id @default(auto()) @map("_id") @db.ObjectId
  // @@schema("user-data")
}

model movies {
  id                   String  @id @map("_id")
  title                String
  genres               String
  production_companies String?
  original_language    String
  overview             String?
  popularity           String
  release_date         String
  status               String
  vote_average         String
  vote_count           String
  credits              String?
  keywords             String?
  poster_path          String
  runtime              String?
}
